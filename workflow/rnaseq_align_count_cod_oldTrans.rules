import pandas as pd
configfile: "configs/config_align_count_trans.yaml"

samples = pd.read_csv(config["METAFILE"], sep = '\t', header = 0)['sample']
indexes = list(range(1, 9))
end = config["END"]

rule end:
    input:
        report = config["FINALOUTPUT"] + "/report_align.html",
        formatCount = expand(config["FINALOUTPUT"] + "/countFile/{sample}_count.csv", sample = samples)

if end == "pair":
    rule getReads:
        output:
            forward = temp(config["OUTPUTPATH"] + "/reads/{sample}_forward.fastq.gz"),
            reverse = temp(config["OUTPUTPATH"] + "/reads/{sample}_reverse.fastq.gz")
        run:
            shell("scp -i {config[KEY]} {config[INPUTPATH]}/{wildcards.sample}_*R1*.fastq.gz {output.forward}")
            shell("scp -i {config[KEY]} {config[INPUTPATH]}/{wildcards.sample}_*R2*.fastq.gz {output.reverse}")
else:
    rule getReads:
        output:
            forward = temp(config["OUTPUTPATH"] + "/reads/{sample}.fastq.gz")
        run:
            shell("scp -i {config[KEY]} {config[INPUTPATH]}/{wildcards.sample}*.fastq.gz {output.forward}")

rule indexTrans:
    input:
        trans = config["TRANS"]
    output:
        indexes = expand(config["OUTPUTPATH"] + "/indexes/index.{index}.ht2", index = indexes)
    params:
        index = config["OUTPUTPATH"] + "/indexes/index"
    shell:
        "hisat2-build -p {config[NCORE]} {input.trans} {params.index}"

if end == "pair":
    rule alignment:
        input:
            index = expand(config["OUTPUTPATH"] + "/indexes/index.{index}.ht2", index = indexes),
            forward = config["OUTPUTPATH"] + "/reads/{sample}_forward.fastq.gz",
            reverse = config["OUTPUTPATH"] + "/reads/{sample}_reverse.fastq.gz"
        output:
            sam = temp(config["OUTPUTPATH"] + "/samFile/{sample}.sam"),
            bam = temp(config["OUTPUTPATH"] + "/bamFile/{sample}.bam")
        params:
            index = config["OUTPUTPATH"] + "/indexes/index"
        shell:
            "hisat2 -p {config[NCORE]} -x {params.index} -1 {input.forward} -2 {input.reverse} -S {output.sam} && "
            "samtools view -@ {config[NCORE]} -b -S {output.sam} > {output.bam}"
else:
    rule alignment:
        input:
            index = expand(config["OUTPUTPATH"] + "/indexes/index.{index}.ht2", index = indexes),
            forward = config["OUTPUTPATH"] + "/reads/{sample}.fastq.gz"
        output:
            sam = temp(config["OUTPUTPATH"] + "/samFile/{sample}.sam"),
            bam = temp(config["OUTPUTPATH"] + "/bamFile/{sample}.bam")
        params:
            index = config["OUTPUTPATH"] + "/indexes/index"
        shell:
            "hisat2 -p {config[NCORE]} -x {params.index} -U {input.forward} -S {output.sam} && "
            "samtools view -@ {config[NCORE]} -b -S {output.sam} > {output.bam}"

rule sortBAM:
    input:
        bam = config["OUTPUTPATH"] + "/bamFile/{sample}.bam"
    output:
        sort = config["OUTPUTPATH"] + "/bamFileSort/{sample}.sort.bam"
    shell:
        "samtools sort -@ {config[NCORE]} {input.bam} -o {output.sort} && samtools index {output.sort}"

rule alignmentQC:
    input:
        sort = config["OUTPUTPATH"] + "/bamFileSort/{sample}.sort.bam"
    output:
        bamqc = directory(config["FINALOUTPUT"] + "/alignmentQC/{sample}_BAMqc")
    shell:
        "qualimap bamqc -bam {input.sort} -outdir {output.bamqc}"

rule summaryReportQC:
    input:
        bamqc = expand(config["FINALOUTPUT"] + "/alignmentQC/{sample}_BAMqc", sample = samples)
    output:
        report = config["FINALOUTPUT"] + "/report_align.html"
    shell:
        "multiqc {input.bamqc} --filename {output.report}"

rule featureCount:
    input:
        sort = config["OUTPUTPATH"] + "/bamFileSort/{sample}.sort.bam"
    output:
        count = config["FINALOUTPUT"] + "/countFile/{sample}.count"
    shell:
        "samtools idxstats {input.sort} > {output.count}"

rule mergeTransGene:
    input:
        transCount = config["FINALOUTPUT"] + "/countFile/{sample}.count"
    output:
        geneCount = config["FINALOUTPUT"] + "/countFile/{sample}.countmerged.idx"
    shell:
        "cd ../scripts && javac -cp opencsv-1.8.jar:. sumgenescod.java && java -cp opencsv-1.8.jar:. sumgenescod codgenelist.csv {input}"

rule formatCount:
    input:
        geneCount = config["FINALOUTPUT"] + "/countFile/{sample}.countmerged.idx"
    output:
        formatCount = config["FINALOUTPUT"] + "/countFile/{sample}_count.csv"
    shell:
        "sh ../scripts/formatCount.sh {input.geneCount} {output.formatCount}"
